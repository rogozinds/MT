  links
  http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6551901&newsearch=true&queryText=image%20comparison
  http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6569773&newsearch=true&queryText=screenshot%20comparison
  
  \section {Other frameworks ideas}
      Paper \cite{Xu1} and \cite{Zhongen2} describes of the capture-replay
      tehnique.
      The testing monitor agent chooses the user scenario, which is written by
      the tester, then testing agent executes the scenario and outputs the testing
       resutls to the monitor agent. Then the monitor compares the test output
       with the expected result and prints the final report. The example of the
       test case in paper \cite{Zhongen2}
       \lstset{language=XML}
       \begin{lstlisting}
       <request url = "http://mytestWebsite/login.asp"> 
        <parameter name = "name" value = "computer"/> 
        <parameter name = "password" value = "hello"/> 
      </request> 
      <response> 
        <match op = "contains" regexp=false select = 
        "/html/body" value = "Login Error!"/> 
      </response> 
      \end{lstlisting}  
    This approach has one major disadvantage, such test framework can not test
    the application UI, it tests only server side logic, while client
    side stays untested. Another minor issue is that developer wants to write
    code and tests using same language, the reason is that code and tests are
    written in parallel, so testing framework should be very close to the
    developing framework and programming language.
    
    The paper \cite{testGen3} describes an improved tool for Web application testing. 
      ``The test driver for testing the client-side pages has the structure as
      shown in Fig.1. (1)  is the parameter initialization part. This part reads the test data and 
     initializes parameters shown in the  user interface form. (2) is the test 
     execution part that executes the  user interface form on the target 
     page. In the part (2), the control  script written in the script 
     languages like Javascript simulates event user actions in the Web browser. (3) is the inner frame 
     that contains the target page.'''
      This tool allows to test client-side code, because the test driver
      contains the target page and script to simulate user actions in the
      Web browser. 
              Figure 1
    Both approaches 1 and 2 have one major disadvantage:
      Client side testing is not complete. Thought approach includes client side
      page, it does not provide any tool for testing appearence of the Webpage. The
      client side page may have bugs in css or html, for example if all html
      elements had css rule display:none, they would not be shown for user in the
      Web browser. Thought all user actions could be still emulated by javascript.